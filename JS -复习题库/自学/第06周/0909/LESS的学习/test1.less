/* 我们基于@import最好导入的是LESS文件（只有这样最后才能编译到一起；设置reference是只导入进来调取使用，编译的时候不进行编译； */
@import './reset.less';
@import (reference) './common.less';

.box {
	@W: 200;
	@H: 200;
	.func_center(@W, @H);
	box-sizing: border-box;
	width: unit(@W, px);
	height: unit(@H, px);
	background: @C1;

	&:hover {
		background: darken(@C1, 20%);
	}
}



/* .loop(@n) when (@n<=4) {
	.loop(@n+1);

	.column-@{n} {
		width: unit(@n*10, %);
	}
}

.loop(1); */


/*
 * @color-red: lightblue;
 * @images: "../images";
 *
 * background: url("@{images}/zf_cubeBg.jpg") no-repeat; 
 * border: 10px solid @color-red;
 */

/*
 * 嵌套（减少前缀） 
 * 每一个大括号都是一个私有的作用域，在里面用到的变量，先看是否为私有的（是否在当前作用域中声明过和形参变量），不是私有的，找上级作用域中的 =>"类似于JS作用域链这套机制" 
 * unit：less中内置的函数，用来设置或者去除单位的
 */
/* @A1: lightblue;

.func_center(@W: 100, @H: 100) {
	position: absolute;
	top: 50%;
	left: 50%;
	margin: unit(-@H/2, px) 0 0 unit(-@W/2, px);
}

.func_transition(@property: all, @duration: .5s, @timing: linear, @delay: 0s) {
	// transition: @property @duration @timing @delay;
	transition: @arguments;
}

img {
	.func_transition;
	.func_transition(@duration: 1s);
	.func_transition(opacity, .3s, ease, 0s);
}

.box1 {
	@A1: lightgreen;
	@W: 200;
	@H: 200px;

	.func_center(@W, unit(@H, px));

	box-sizing: border-box;
	width: unit(@W, px);
	height: @H;
	border: 5px solid @A1;

	//.box1 img
	img {
		//@W-20这样被理解为是一个变量名（变量名可以包含-）
		width: unit((@W)-20, px);
		height: unit(unit(@H, px)-20, px);
	}

	//&嵌套中的连接符,让后面的选择器紧挨着父选择器 .box1>img
	// &>img {
	// 	transform: skew(45deg);
	// }

	//.box1:hover
	&:hover {}
} */

/*
 * 函数
 *  1.每一个样式类都能被充当一个函数，直接在其它的作用域中调取执行（执行特点：不需要传参，可以不加小括号） =>这种函数的调用是把原有的代码都原封不动的拿过来一份一模一样的（包括其所有的后代样式）
 *  2.带参数的函数（创建函数带着小括号），也是直接点的方式调用，但是编译成为css的时候，函数不会编译，但是函数执行出来的代码会放到每一个调取函数的选择器中
 *  3.less中的内置函数
 *    + unit
 *    + darken
 *    + lighten
 *
 * 继承
 *  1.基于继承也能实现样式的公用（原理：两个样式类公用同一套代码，但是后代样式不能被继承）
 */
// .box2 {
// 	.box1;
// 	display: none;
// }

// .box2 {
// 	&:extend(.box1);
// }

// .box2:extend(.box1) {}

/* .link {
	@BG: lightblue;

	margin: 20px;
	width: 100px;
	height: 35px;
	border: 1px solid #AAA;
	background: @BG;

	&:hover {
		background: lighten(@BG, 10%);
	}
} */